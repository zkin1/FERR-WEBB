{
  "assets": {
    "css": {
      "cart.css": "/* Estilos para la página del carrito */\r\n.cart-section {\r\n    padding: 40px 0;\r\n    min-height: 400px;\r\n}\r\n\r\n.cart-section h1 {\r\n    margin-bottom: 30px;\r\n    color: var(--primary-color);\r\n}\r\n\r\n.cart-table {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n    margin-bottom: 30px;\r\n}\r\n\r\n.cart-table th {\r\n    background-color: var(--light-gray);\r\n    padding: 12px;\r\n    text-align: left;\r\n    font-weight: bold;\r\n}\r\n\r\n.cart-table td {\r\n    padding: 12px;\r\n    border-bottom: 1px solid var(--light-gray);\r\n}\r\n\r\n.product-info {\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n.product-info img {\r\n    width: 80px;\r\n    height: 80px;\r\n    object-fit: contain;\r\n    margin-right: 15px;\r\n}\r\n\r\n.product-info h4 {\r\n    margin: 0;\r\n    font-size: 1rem;\r\n}\r\n\r\n.quantity-control {\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n.quantity-btn {\r\n    width: 30px;\r\n    height: 30px;\r\n    background-color: var(--light-gray);\r\n    border: none;\r\n    border-radius: 50%;\r\n    cursor: pointer;\r\n    font-weight: bold;\r\n    font-size: 1.2rem;\r\n}\r\n\r\n.quantity-input {\r\n    width: 40px;\r\n    text-align: center;\r\n    margin: 0 10px;\r\n    padding: 5px;\r\n    border: 1px solid var(--dark-gray);\r\n    border-radius: var(--border-radius);\r\n}\r\n\r\n.remove-btn {\r\n    background: none;\r\n    border: none;\r\n    color: var(--danger);\r\n    cursor: pointer;\r\n    font-size: 1.2rem;\r\n}\r\n\r\n.cart-actions {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin-top: 20px;\r\n}\r\n\r\n.cart-summary {\r\n    background-color: var(--white);\r\n    padding: 20px;\r\n    border-radius: var(--border-radius);\r\n    box-shadow: var(--shadow);\r\n    margin-top: 20px;\r\n}\r\n\r\n.total {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    font-size: 1.2rem;\r\n    font-weight: bold;\r\n}\r\n\r\n.empty-cart {\r\n    text-align: center;\r\n    padding: 40px 0;\r\n}\r\n\r\n.empty-cart p {\r\n    margin-bottom: 20px;\r\n    font-size: 1.2rem;\r\n}\r\n\r\n.notification {\r\n    position: fixed;\r\n    top: 20px;\r\n    right: 20px;\r\n    padding: 15px 25px;\r\n    background-color: var(--success);\r\n    color: var(--white);\r\n    border-radius: var(--border-radius);\r\n    box-shadow: var(--shadow);\r\n    opacity: 0;\r\n    transform: translateY(-20px);\r\n    transition: opacity 0.3s ease, transform 0.3s ease;\r\n    z-index: 1000;\r\n}\r\n\r\n.notification.show {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n}",
      "checkout.css": "",
      "footer.css": "",
      "header.css": "",
      "home.css": "",
      "products.css": "/* Estilos para tarjetas de productos */\r\n.product-card {\r\n    background-color: var(--white);\r\n    border-radius: var(--border-radius);\r\n    box-shadow: var(--shadow);\r\n    overflow: hidden;\r\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\r\n}\r\n\r\n.product-card:hover {\r\n    transform: translateY(-5px);\r\n    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.product-image {\r\n    height: 200px;\r\n    overflow: hidden;\r\n}\r\n\r\n.product-image img {\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: contain;\r\n    transition: transform 0.3s ease;\r\n}\r\n\r\n.product-card:hover .product-image img {\r\n    transform: scale(1.05);\r\n}\r\n\r\n.product-details {\r\n    padding: 15px;\r\n}\r\n\r\n.product-title {\r\n    font-size: 1rem;\r\n    font-weight: bold;\r\n    margin-bottom: 10px;\r\n    height: 40px;\r\n    overflow: hidden;\r\n    display: -webkit-box;\r\n    -webkit-line-clamp: 2;\r\n    -webkit-box-orient: vertical;\r\n}\r\n\r\n.product-price {\r\n    font-size: 1.2rem;\r\n    color: var(--primary-color);\r\n    font-weight: bold;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.product-price .original-price {\r\n    text-decoration: line-through;\r\n    color: var(--dark-gray);\r\n    font-size: 0.9rem;\r\n    margin-right: 5px;\r\n}\r\n\r\n.add-to-cart {\r\n    width: 100%;\r\n    text-align: center;\r\n}\r\n\r\n/* Estilos para el detalle de producto */\r\n.product-layout {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    gap: 30px;\r\n    margin-bottom: 30px;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n    .product-layout {\r\n        grid-template-columns: 1fr;\r\n    }\r\n}\r\n\r\n.product-images {\r\n    position: relative;\r\n}\r\n\r\n.main-image {\r\n    border: 1px solid var(--light-gray);\r\n    border-radius: var(--border-radius);\r\n    overflow: hidden;\r\n    margin-bottom: 10px;\r\n    height: 400px;\r\n}\r\n\r\n.main-image img {\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: contain;\r\n}\r\n\r\n.thumbnails {\r\n    display: flex;\r\n    gap: 10px;\r\n    overflow-x: auto;\r\n}\r\n\r\n.thumbnail {\r\n    width: 60px;\r\n    height: 60px;\r\n    border: 1px solid var(--light-gray);\r\n    border-radius: var(--border-radius);\r\n    cursor: pointer;\r\n    overflow: hidden;\r\n}\r\n\r\n.thumbnail img {\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: cover;\r\n}\r\n\r\n.thumbnail.active {\r\n    border-color: var(--primary-color);\r\n}\r\n\r\n.product-info h1 {\r\n    font-size: 1.8rem;\r\n    margin-bottom: 15px;\r\n    color: var(--text-color);\r\n}\r\n\r\n.product-code {\r\n    color: var(--dark-gray);\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.product-price-detail {\r\n    font-size: 1.8rem;\r\n    color: var(--primary-color);\r\n    margin-bottom: 15px;\r\n}\r\n\r\n.product-price-detail .original-price {\r\n    text-decoration: line-through;\r\n    color: var(--dark-gray);\r\n    font-size: 1.2rem;\r\n    margin-right: 10px;\r\n}\r\n\r\n.product-description {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.product-quantity {\r\n    display: flex;\r\n    align-items: center;\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.quantity-input {\r\n    width: 60px;\r\n    text-align: center;\r\n    margin: 0 10px;\r\n    padding: 5px;\r\n    border: 1px solid var(--dark-gray);\r\n    border-radius: var(--border-radius);\r\n}\r\n\r\n.quantity-btn {\r\n    width: 30px;\r\n    height: 30px;\r\n    background-color: var(--light-gray);\r\n    border: none;\r\n    border-radius: 50%;\r\n    cursor: pointer;\r\n    font-weight: bold;\r\n    font-size: 1.2rem;\r\n}\r\n\r\n.add-to-cart-detail {\r\n    margin-top: 20px;\r\n}\r\n\r\n.product-specs {\r\n    background-color: var(--white);\r\n    padding: 20px;\r\n    border-radius: var(--border-radius);\r\n    margin-top: 30px;\r\n}\r\n\r\n.product-specs h3 {\r\n    margin-bottom: 15px;\r\n    color: var(--primary-color);\r\n}\r\n\r\n.specs-table {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n}\r\n\r\n.specs-table tr:nth-child(even) {\r\n    background-color: var(--light-gray);\r\n}\r\n\r\n.specs-table th, .specs-table td {\r\n    padding: 10px;\r\n    text-align: left;\r\n    border-bottom: 1px solid var(--light-gray);\r\n}\r\n\r\n.specs-table th {\r\n    width: 40%;\r\n    font-weight: bold;\r\n}\r\n\r\n/* Categorías */\r\n.category-card {\r\n    position: relative;\r\n    height: 150px;\r\n    border-radius: var(--border-radius);\r\n    overflow: hidden;\r\n}\r\n\r\n.category-card img {\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: cover;\r\n}\r\n\r\n.category-overlay {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    transition: background-color 0.3s ease;\r\n}\r\n\r\n.category-card:hover .category-overlay {\r\n    background-color: rgba(0, 0, 0, 0.7);\r\n}\r\n\r\n.category-name {\r\n    color: var(--white);\r\n    font-size: 1.2rem;\r\n    font-weight: bold;\r\n    text-align: center;\r\n    padding: 10px;\r\n}",
      "styles.css": "/* Estilos Globales */\r\n:root {\r\n    --primary-color: #0066cc;\r\n    --secondary-color: #ff6600;\r\n    --accent-color: #ffcc00;\r\n    --text-color: #333333;\r\n    --light-gray: #f4f4f4;\r\n    --dark-gray: #666666;\r\n    --white: #ffffff;\r\n    --black: #000000;\r\n    --success: #28a745;\r\n    --danger: #dc3545;\r\n    --border-radius: 4px;\r\n    --shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    line-height: 1.6;\r\n    color: var(--text-color);\r\n    background-color: var(--light-gray);\r\n}\r\n\r\n.container {\r\n    width: 100%;\r\n    max-width: 1200px;\r\n    margin: 0 auto;\r\n    padding: 0 15px;\r\n}\r\n\r\na {\r\n    text-decoration: none;\r\n    color: var(--primary-color);\r\n}\r\n\r\nul {\r\n    list-style: none;\r\n}\r\n\r\n.btn {\r\n    display: inline-block;\r\n    padding: 10px 20px;\r\n    background-color: var(--secondary-color);\r\n    color: var(--white);\r\n    border: none;\r\n    border-radius: var(--border-radius);\r\n    cursor: pointer;\r\n    font-weight: bold;\r\n    transition: background-color 0.3s ease;\r\n}\r\n\r\n.btn:hover {\r\n    background-color: var(--accent-color);\r\n}\r\n\r\nimg {\r\n    max-width: 100%;\r\n    height: auto;\r\n}\r\n\r\n/* Secciones */\r\nsection {\r\n    padding: 40px 0;\r\n}\r\n\r\nsection h2 {\r\n    text-align: center;\r\n    margin-bottom: 30px;\r\n    color: var(--primary-color);\r\n    position: relative;\r\n}\r\n\r\nsection h2::after {\r\n    content: '';\r\n    display: block;\r\n    width: 50px;\r\n    height: 3px;\r\n    background-color: var(--secondary-color);\r\n    margin: 10px auto;\r\n}\r\n\r\n/* Grids */\r\n.products-grid, .categories-grid {\r\n    display: grid;\r\n    grid-template-columns: repeat(4, 1fr);\r\n    gap: 20px;\r\n}\r\n\r\n@media (max-width: 992px) {\r\n    .products-grid, .categories-grid {\r\n        grid-template-columns: repeat(3, 1fr);\r\n    }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n    .products-grid, .categories-grid {\r\n        grid-template-columns: repeat(2, 1fr);\r\n    }\r\n}\r\n\r\n@media (max-width: 576px) {\r\n    .products-grid, .categories-grid {\r\n        grid-template-columns: 1fr;\r\n    }\r\n}\r\n\r\n/* Banner */\r\n.banner {\r\n    position: relative;\r\n    height: 400px;\r\n    overflow: hidden;\r\n}\r\n\r\n.banner img {\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: cover;\r\n}\r\n\r\n.banner-text {\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    text-align: center;\r\n    color: var(--white);\r\n    background-color: rgba(0, 0, 0, 0.6);\r\n    padding: 20px;\r\n    border-radius: var(--border-radius);\r\n    width: 80%;\r\n    max-width: 600px;\r\n}\r\n\r\n.banner-text h1 {\r\n    font-size: 2.5rem;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.banner-text p {\r\n    font-size: 1.2rem;\r\n    margin-bottom: 20px;\r\n}\r\n\r\n/* Breadcrumb */\r\n.breadcrumb {\r\n    background-color: var(--white);\r\n    padding: 10px 0;\r\n    margin-bottom: 20px;\r\n    box-shadow: var(--shadow);\r\n}\r\n\r\n.breadcrumb ul {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n}\r\n\r\n.breadcrumb li {\r\n    margin-right: 10px;\r\n}\r\n\r\n.breadcrumb li:not(:last-child)::after {\r\n    content: '>';\r\n    margin-left: 10px;\r\n    color: var(--dark-gray);\r\n}\r\n\r\n.breadcrumb a:hover {\r\n    text-decoration: underline;\r\n}\r\n\r\n/* Formularios */\r\n.form-group {\r\n    margin-bottom: 15px;\r\n}\r\n\r\n.form-group label {\r\n    display: block;\r\n    margin-bottom: 5px;\r\n    font-weight: bold;\r\n}\r\n\r\n.form-control {\r\n    width: 100%;\r\n    padding: 10px;\r\n    border: 1px solid var(--dark-gray);\r\n    border-radius: var(--border-radius);\r\n}\r\n\r\n/* Alertas */\r\n.alert {\r\n    padding: 10px 15px;\r\n    margin-bottom: 15px;\r\n    border-radius: var(--border-radius);\r\n}\r\n\r\n.alert-success {\r\n    background-color: var(--success);\r\n    color: var(--white);\r\n}\r\n\r\n.alert-danger {\r\n    background-color: var(--danger);\r\n    color: var(--white);\r\n}"
    },
    "images": {
      "categorias": {
        "default.jpg": "(binary)"
      },
      "default.jpg": "(binary)",
      "logo.png": ""
    },
    "js": {
      "api.js": "// URL base de la API\r\nconst API_URL = 'http://localhost:3000/api';\r\n\r\n\r\nlet isFetching = false;\r\n\r\n\r\nfunction getBaseUrl() {\r\n    // Obtener la URL completa actual\r\n    const currentUrl = window.location.href;\r\n    console.log('URL actual:', currentUrl);\r\n    \r\n    // Verificar si estamos en index.html en la raíz o en una subcarpeta\r\n    if (currentUrl.includes('/index.html')) {\r\n        if (currentUrl.includes('/ferremas-ecommerce/') || \r\n            currentUrl.includes('/pages/')) {\r\n            // Estamos en una subcarpeta\r\n            return './';\r\n        } else {\r\n            // Estamos en la raíz\r\n            return 'ferremas-ecommerce/pages/';\r\n        }\r\n    } else if (currentUrl.includes('/ferremas-ecommerce/pages/')) {\r\n        // Estamos en alguna página dentro de /ferremas-ecommerce/pages/\r\n        return './';\r\n    } else {\r\n        // Por defecto, asumir que estamos en la raíz\r\n        return 'ferremas-ecommerce/pages/';\r\n    }\r\n}\r\n\r\n// Luego usar esta función para construir URLs\r\nfunction getProductUrl(productId) {\r\n    return `${getBaseUrl()}products.html?id=${productId}`;\r\n}\r\n\r\nfunction getCategoryUrl(categoryId) {\r\n    return `${getBaseUrl()}categorias.html?id=${categoryId}`;\r\n}\r\n\r\n\r\n// Función para obtener datos de la API\r\nasync function fetchAPI(endpoint) {\r\n    try {\r\n        console.log('Fetching:', API_URL + endpoint); // Debug\r\n        const response = await fetch(`${API_URL}${endpoint}`);\r\n        \r\n        if (!response.ok) {\r\n            throw new Error(`Error: ${response.status}`);\r\n        }\r\n        \r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error('Error en la API:', error);\r\n        // Devuelve un array vacío o un objeto básico según el contexto para evitar errores\r\n        return endpoint.includes('productos') ? [] : {};\r\n    }\r\n}\r\n\r\n// Obtener todas las categorías\r\nasync function getCategorias() {\r\n    try {\r\n        return await fetchAPI('/categorias');\r\n    } catch (error) {\r\n        console.error('Error al obtener categorías:', error);\r\n        // Devolver datos de muestra\r\n        return [\r\n            { id: 1, nombre: 'Herramientas', slug: 'herramientas' },\r\n            { id: 2, nombre: 'Herramientas Manuales', slug: 'herramientas-manuales' },\r\n            { id: 3, nombre: 'Herramientas Eléctricas', slug: 'herramientas-electricas' },\r\n            { id: 4, nombre: 'Materiales de Construcción', slug: 'materiales-construccion' },\r\n            { id: 5, nombre: 'Ferretería General', slug: 'ferreteria-general' }\r\n        ];\r\n    }\r\n}\r\n\r\n// Obtener una categoría por ID\r\nasync function getCategoriaById(id) {\r\n    return await fetchAPI(`/categorias/${id}`);\r\n}\r\n\r\n// Obtener subcategorías por ID de categoría\r\nasync function getSubcategoriasByCategoria(categoriaId) {\r\n    return await fetchAPI(`/categorias/${categoriaId}/subcategorias`);\r\n}\r\n\r\n// Obtener todos los productos (paginados)\r\nasync function getProductos(page = 1, limit = 10) {\r\n    try {\r\n        return await fetchAPI(`/productos?page=${page}&limit=${limit}`);\r\n    } catch (error) {\r\n        console.error('Error al obtener productos:', error);\r\n        // Devolver datos de muestra\r\n        return {\r\n            productos: [\r\n                { id: 1, nombre: 'Martillo Profesional', codigo: 'MART001', precio: 12990, categoria_id: 1 },\r\n                { id: 2, nombre: 'Destornillador Eléctrico', codigo: 'DEST001', precio: 19990, categoria_id: 3 },\r\n                { id: 3, nombre: 'Sierra Circular', codigo: 'SIER001', precio: 89990, categoria_id: 3 },\r\n                { id: 4, nombre: 'Cemento 25kg', codigo: 'CEM001', precio: 5990, categoria_id: 4 }\r\n            ],\r\n            pagination: { page: 1, limit: 10, totalItems: 4, totalPages: 1 }\r\n        };\r\n    }\r\n}\r\n\r\nconst BASE_URL = window.location.origin;\r\nconsole.log('URL Base del sitio:', BASE_URL);\r\nconsole.log('Ruta actual:', window.location.pathname);\r\n\r\n// Obtener producto por ID\r\nasync function getProductoById(id) {\r\n    return await fetchAPI(`/productos/${id}`);\r\n}\r\n\r\n// Obtener productos por categoría\r\nasync function getProductosByCategoria(categoriaId, page = 1, limit = 10) {\r\n    return await fetchAPI(`/categorias/${categoriaId}/productos?page=${page}&limit=${limit}`);\r\n}\r\n\r\n// Obtener productos por subcategoría\r\nasync function getProductosBySubcategoria(subcategoriaId, page = 1, limit = 10) {\r\n    return await fetchAPI(`/subcategorias/${subcategoriaId}/productos?page=${page}&limit=${limit}`);\r\n}\r\n\r\n// Obtener productos destacados\r\nasync function getProductosDestacados(limit = 8) {\r\n    return await fetchAPI(`/productos/destacados?limit=${limit}`);\r\n}\r\n\r\n// Obtener productos nuevos\r\nasync function getProductosNuevos(limit = 8) {\r\n    return await fetchAPI(`/productos/nuevos?limit=${limit}`);\r\n}\r\n\r\n// Buscar productos\r\nasync function buscarProductos(query, page = 1, limit = 10) {\r\n    return await fetchAPI(`/productos/buscar?q=${encodeURIComponent(query)}&page=${page}&limit=${limit}`);\r\n}\r\n\r\n// Obtener imágenes de un producto\r\nasync function getImagenesProducto(productoId) {\r\n    return await fetchAPI(`/productos/${productoId}/imagenes`);\r\n}\r\n\r\n// Obtener especificaciones de un producto\r\nasync function getEspecificacionesProducto(productoId) {\r\n    return await fetchAPI(`/productos/${productoId}/especificaciones`);\r\n}\r\n\r\n// Obtener marcas\r\nasync function getMarcas() {\r\n    return await fetchAPI('/marcas');\r\n}\r\n\r\n// Obtener marca por ID\r\nasync function getMarcaById(id) {\r\n    return await fetchAPI(`/marcas/${id}`);\r\n}",
      "auth.js": "",
      "carrito.js": "// Inicializar carrito desde localStorage\r\nfunction initCart() {\r\n    return JSON.parse(localStorage.getItem('carrito')) || { items: [], total: 0 };\r\n}\r\n\r\n// Guardar carrito en localStorage\r\nfunction saveCart(cart) {\r\n    localStorage.setItem('carrito', JSON.stringify(cart));\r\n}\r\n\r\n// Obtener carrito\r\nfunction getCart() {\r\n    return initCart();\r\n}\r\n\r\n// Añadir producto al carrito\r\nfunction addToCart(product) {\r\n    let cart = initCart();\r\n    \r\n    // Verificar si el producto ya existe en el carrito\r\n    const existingItemIndex = cart.items.findIndex(item => item.id === product.id);\r\n    \r\n    if (existingItemIndex >= 0) {\r\n        // Actualizar cantidad si ya existe\r\n        cart.items[existingItemIndex].cantidad += product.cantidad;\r\n    } else {\r\n        // Añadir nuevo producto al carrito\r\n        cart.items.push(product);\r\n    }\r\n    \r\n    // Recalcular total\r\n    updateCartTotal(cart);\r\n    \r\n    // Guardar en localStorage\r\n    saveCart(cart);\r\n    \r\n    // Actualizar contador del carrito en la interfaz\r\n    updateCartCount();\r\n}\r\n\r\n// Eliminar producto del carrito\r\nfunction removeFromCart(productId) {\r\n    let cart = initCart();\r\n    \r\n    // Filtrar los items para eliminar el producto\r\n    cart.items = cart.items.filter(item => item.id !== productId);\r\n    \r\n    // Recalcular total\r\n    updateCartTotal(cart);\r\n    \r\n    // Guardar en localStorage\r\n    saveCart(cart);\r\n    \r\n    // Actualizar contador del carrito en la interfaz\r\n    updateCartCount();\r\n    \r\n    return cart;\r\n}\r\n\r\n// Actualizar cantidad de un producto\r\nfunction updateQuantity(productId, cantidad) {\r\n    let cart = initCart();\r\n    \r\n    // Encontrar el producto en el carrito\r\n    const itemIndex = cart.items.findIndex(item => item.id === productId);\r\n    \r\n    if (itemIndex >= 0) {\r\n        if (cantidad <= 0) {\r\n            // Si la cantidad es 0 o menor, eliminar el producto\r\n            return removeFromCart(productId);\r\n        } else {\r\n            // Actualizar la cantidad\r\n            cart.items[itemIndex].cantidad = cantidad;\r\n        }\r\n        \r\n        // Recalcular total\r\n        updateCartTotal(cart);\r\n        \r\n        // Guardar en localStorage\r\n        saveCart(cart);\r\n    }\r\n    \r\n    // Actualizar contador del carrito en la interfaz\r\n    updateCartCount();\r\n    \r\n    return cart;\r\n}\r\n\r\n// Vaciar carrito\r\nfunction clearCart() {\r\n    // Crear carrito vacío\r\n    const emptyCart = { items: [], total: 0 };\r\n    \r\n    // Guardar en localStorage\r\n    saveCart(emptyCart);\r\n    \r\n    // Actualizar contador del carrito en la interfaz\r\n    updateCartCount();\r\n    \r\n    return emptyCart;\r\n}\r\n\r\n// Actualizar total del carrito\r\nfunction updateCartTotal(cart) {\r\n    cart.total = cart.items.reduce((sum, item) => sum + (item.precio * item.cantidad), 0);\r\n}\r\n\r\n// Actualizar contador del carrito en la interfaz\r\nfunction updateCartCount() {\r\n    const cart = initCart();\r\n    const cartCount = document.getElementById('cart-count');\r\n    \r\n    if (cartCount) {\r\n        // Calcular cantidad total de productos\r\n        const itemCount = cart.items.reduce((sum, item) => sum + item.cantidad, 0);\r\n        cartCount.textContent = itemCount;\r\n    }\r\n}\r\n\r\n// Renderizar carrito en la página de carrito\r\nfunction renderCart() {\r\n    const cartContainer = document.getElementById('cart-items');\r\n    const cartTotalElement = document.getElementById('cart-total');\r\n    \r\n    if (!cartContainer) return;\r\n    \r\n    const cart = initCart();\r\n    \r\n    // Limpiar el contenedor\r\n    cartContainer.innerHTML = '';\r\n    \r\n    if (cart.items.length === 0) {\r\n        // Mostrar mensaje si el carrito está vacío\r\n        cartContainer.innerHTML = `\r\n            <div class=\"empty-cart\">\r\n                <p>Tu carrito está vacío</p>\r\n                <a href=\"index.html\" class=\"btn\">Ir a la tienda</a>\r\n            </div>\r\n        `;\r\n        \r\n        if (cartTotalElement) {\r\n            cartTotalElement.textContent = '$0';\r\n        }\r\n    } else {\r\n        // Crear tabla del carrito\r\n        const table = document.createElement('table');\r\n        table.className = 'cart-table';\r\n        \r\n        // Cabecera de la tabla\r\n        table.innerHTML = `\r\n            <thead>\r\n                <tr>\r\n                    <th>Producto</th>\r\n                    <th>Precio</th>\r\n                    <th>Cantidad</th>\r\n                    <th>Subtotal</th>\r\n                    <th>Acciones</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody id=\"cart-items-body\"></tbody>\r\n        `;\r\n        \r\n        cartContainer.appendChild(table);\r\n        \r\n        const tbody = document.getElementById('cart-items-body');\r\n        \r\n        // Añadir filas para cada producto\r\n        cart.items.forEach(item => {\r\n            const tr = document.createElement('tr');\r\n            \r\n            tr.innerHTML = `\r\n                <td class=\"product-info\">\r\n                    <img src=\"${item.imagen}\" alt=\"${item.nombre}\" onerror=\"this.src='assets/images/productos/default.jpg'\">\r\n                    <div>\r\n                        <h4>${item.nombre}</h4>\r\n                    </div>\r\n                </td>\r\n                <td class=\"price\">$${formatPrice(item.precio)}</td>\r\n                <td class=\"quantity\">\r\n                    <div class=\"quantity-control\">\r\n                        <button class=\"quantity-btn dec\" data-id=\"${item.id}\">-</button>\r\n                        <input type=\"number\" value=\"${item.cantidad}\" min=\"1\" class=\"quantity-input\" data-id=\"${item.id}\">\r\n                        <button class=\"quantity-btn inc\" data-id=\"${item.id}\">+</button>\r\n                    </div>\r\n                </td>\r\n                <td class=\"subtotal\">$${formatPrice(item.precio * item.cantidad)}</td>\r\n                <td class=\"actions\">\r\n                    <button class=\"remove-btn\" data-id=\"${item.id}\">🗑️</button>\r\n                </td>\r\n            `;\r\n            \r\n            tbody.appendChild(tr);\r\n        });\r\n        \r\n        // Actualizar total\r\n        if (cartTotalElement) {\r\n            cartTotalElement.textContent = `$${formatPrice(cart.total)}`;\r\n        }\r\n        \r\n        // Añadir botones de acción al final del carrito\r\n        const actionsDiv = document.createElement('div');\r\n        actionsDiv.className = 'cart-actions';\r\n        actionsDiv.innerHTML = `\r\n            <button id=\"clear-cart\" class=\"btn btn-secondary\">Vaciar carrito</button>\r\n            <button id=\"checkout-btn\" class=\"btn\">Proceder al pago</button>\r\n        `;\r\n        \r\n        cartContainer.appendChild(actionsDiv);\r\n        \r\n        // Añadir eventos a los botones\r\n        addCartEventListeners();\r\n    }\r\n}\r\n\r\n// Añadir eventos a los elementos del carrito\r\nfunction addCartEventListeners() {\r\n    // Botones para decrementar cantidad\r\n    const decButtons = document.querySelectorAll('.quantity-btn.dec');\r\n    decButtons.forEach(btn => {\r\n        btn.addEventListener('click', function() {\r\n            const itemId = this.dataset.id;\r\n            const input = document.querySelector(`.quantity-input[data-id=\"${itemId}\"]`);\r\n            let cantidad = parseInt(input.value) - 1;\r\n            if (cantidad < 1) cantidad = 1;\r\n            \r\n            updateQuantity(itemId, cantidad);\r\n            renderCart();\r\n        });\r\n    });\r\n    \r\n    // Botones para incrementar cantidad\r\n    const incButtons = document.querySelectorAll('.quantity-btn.inc');\r\n    incButtons.forEach(btn => {\r\n        btn.addEventListener('click', function() {\r\n            const itemId = this.dataset.id;\r\n            const input = document.querySelector(`.quantity-input[data-id=\"${itemId}\"]`);\r\n            let cantidad = parseInt(input.value) + 1;\r\n            \r\n            updateQuantity(itemId, cantidad);\r\n            renderCart();\r\n        });\r\n    });\r\n    \r\n    // Inputs de cantidad\r\n    const quantityInputs = document.querySelectorAll('.quantity-input');\r\n    quantityInputs.forEach(input => {\r\n        input.addEventListener('change', function() {\r\n            const itemId = this.dataset.id;\r\n            let cantidad = parseInt(this.value);\r\n            if (cantidad < 1) cantidad = 1;\r\n            \r\n            updateQuantity(itemId, cantidad);\r\n            renderCart();\r\n        });\r\n    });\r\n    \r\n    // Botones para eliminar producto\r\n    const removeButtons = document.querySelectorAll('.remove-btn');\r\n    removeButtons.forEach(btn => {\r\n        btn.addEventListener('click', function() {\r\n            const itemId = this.dataset.id;\r\n            \r\n            removeFromCart(itemId);\r\n            renderCart();\r\n        });\r\n    });\r\n    \r\n    // Botón para vaciar carrito\r\n    const clearCartBtn = document.getElementById('clear-cart');\r\n    if (clearCartBtn) {\r\n        clearCartBtn.addEventListener('click', function() {\r\n            if (confirm('¿Está seguro que desea vaciar el carrito?')) {\r\n                clearCart();\r\n                renderCart();\r\n            }\r\n        });\r\n    }\r\n    \r\n    // Botón para proceder al pago\r\n    const checkoutBtn = document.getElementById('checkout-btn');\r\n    if (checkoutBtn) {\r\n        checkoutBtn.addEventListener('click', function() {\r\n            // Aquí iría la lógica para proceder al pago\r\n            alert('Funcionalidad de pago en desarrollo');\r\n        });\r\n    }\r\n}\r\n\r\n// Formatear precios (misma función que en productos.js)\r\nfunction formatPrice(price) {\r\n    return new Intl.NumberFormat('es-CL').format(price);\r\n}\r\n\r\n// Inicializar cuando el DOM esté listo\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    // Actualizar contador del carrito\r\n    updateCartCount();\r\n    \r\n    // Renderizar carrito si estamos en la página de carrito\r\n    if (window.location.pathname.includes('carrito.html')) {\r\n        renderCart();\r\n    }\r\n});",
      "categorias.js": "// Función para cargar categorías en la página principal\r\nasync function loadCategories() {\r\n    try {\r\n        const categoriesContainer = document.getElementById('categories-container');\r\n        if (!categoriesContainer) return;\r\n        \r\n        // Evitar múltiples cargas\r\n        if (categoriesContainer.dataset.loaded === 'true') {\r\n            console.log('Las categorías ya fueron cargadas');\r\n            return;\r\n        }\r\n        \r\n        // Limpiar el contenedor\r\n        categoriesContainer.innerHTML = '<div class=\"loading\">Cargando categorías...</div>';\r\n        \r\n        // Obtener categorías\r\n        const categorias = await getCategorias();\r\n        \r\n        // Marcar como cargado\r\n        categoriesContainer.dataset.loaded = 'true';\r\n        \r\n        // Si no hay datos de API o hay error, mostrar datos de muestra\r\n        if (!categorias || !Array.isArray(categorias) || categorias.length === 0) {\r\n            console.log('Usando categorías de muestra');\r\n            // Categorías de ejemplo para mostrar algo\r\n            mostrarCategoriasDeMuestra(categoriesContainer);\r\n            return;\r\n        }\r\n        \r\n        // Resto del código sin cambios...\r\n    } catch (error) {\r\n        console.error('Error controlado al cargar categorías:', error);\r\n        const categoriesContainer = document.getElementById('categories-container');\r\n        if (categoriesContainer) {\r\n            categoriesContainer.innerHTML = '<p class=\"error\">Error al cargar categorías.</p>';\r\n            categoriesContainer.dataset.loaded = 'true'; // Evitar reintentos\r\n        }\r\n    }\r\n}\r\n\r\n// Función para cargar los productos de una categoría específica\r\nasync function loadCategoryProducts(categoriaId) {\r\n    try {\r\n        const productsContainer = document.getElementById('category-products');\r\n        const categoryTitleElem = document.getElementById('category-title');\r\n        \r\n        if (!productsContainer) return;\r\n        \r\n        // Limpiar el contenedor\r\n        productsContainer.innerHTML = '<div class=\"loading\">Cargando productos...</div>';\r\n        \r\n        // Obtener datos de la categoría\r\n        const categoria = await getCategoriaById(categoriaId);\r\n        \r\n        if (!categoria) {\r\n            productsContainer.innerHTML = '<p class=\"error\">Categoría no encontrada</p>';\r\n            return;\r\n        }\r\n        \r\n        // Actualizar título de la categoría\r\n        if (categoryTitleElem) {\r\n            categoryTitleElem.textContent = categoria.nombre;\r\n        }\r\n        \r\n        // Obtener productos de la categoría\r\n        const resultado = await getProductosByCategoria(categoriaId);\r\n        const productos = resultado.productos;\r\n        \r\n        // Verificar si hay productos\r\n        if (!productos || productos.length === 0) {\r\n            productsContainer.innerHTML = '<p class=\"no-products\">No hay productos disponibles en esta categoría</p>';\r\n            return;\r\n        }\r\n        \r\n        // Limpiar el contenedor\r\n        productsContainer.innerHTML = '';\r\n        \r\n        // Crear tarjetas de productos\r\n        productos.forEach(producto => {\r\n            const card = createProductCard(producto);\r\n            productsContainer.appendChild(card);\r\n        });\r\n        \r\n        // Agregar paginación si hay más de una página\r\n        if (resultado.pagination && resultado.pagination.totalPages > 1) {\r\n            addPagination(productsContainer, resultado.pagination, categoriaId);\r\n        }\r\n    } catch (error) {\r\n        console.error('Error al cargar productos de la categoría:', error);\r\n        const productsContainer = document.getElementById('category-products');\r\n        if (productsContainer) {\r\n            productsContainer.innerHTML = '<p class=\"error\">Error al cargar productos.</p>';\r\n        }\r\n    }\r\n}\r\n\r\n// Función para añadir paginación\r\nfunction addPagination(container, pagination, categoriaId) {\r\n    const paginationDiv = document.createElement('div');\r\n    paginationDiv.className = 'pagination';\r\n    \r\n    let paginationHTML = '';\r\n    \r\n    // Botón anterior\r\n    if (pagination.page > 1) {\r\n        paginationHTML += `<a href=\"categorias.html?id=${categoriaId}&page=${pagination.page - 1}\" class=\"page-link\">Anterior</a>`;\r\n    } else {\r\n        paginationHTML += `<span class=\"page-link disabled\">Anterior</span>`;\r\n    }\r\n    \r\n    // Páginas\r\n    for (let i = 1; i <= pagination.totalPages; i++) {\r\n        if (i === pagination.page) {\r\n            paginationHTML += `<span class=\"page-link active\">${i}</span>`;\r\n        } else {\r\n            paginationHTML += `<a href=\"categorias.html?id=${categoriaId}&page=${i}\" class=\"page-link\">${i}</a>`;\r\n        }\r\n    }\r\n    \r\n    // Botón siguiente\r\n    if (pagination.page < pagination.totalPages) {\r\n        paginationHTML += `<a href=\"categorias.html?id=${categoriaId}&page=${pagination.page + 1}\" class=\"page-link\">Siguiente</a>`;\r\n    } else {\r\n        paginationHTML += `<span class=\"page-link disabled\">Siguiente</span>`;\r\n    }\r\n    \r\n    paginationDiv.innerHTML = paginationHTML;\r\n    container.appendChild(paginationDiv);\r\n}\r\n\r\nfunction mostrarCategoriasDeMuestra(container) {\r\n    // Limpiar el contenedor\r\n    container.innerHTML = '';\r\n    \r\n    // Categorías de ejemplo\r\n    const categoriasDeMuestra = [\r\n        { id: 1, nombre: 'Herramientas', slug: 'herramientas' },\r\n        { id: 2, nombre: 'Herramientas Manuales', slug: 'herramientas-manuales' },\r\n        { id: 3, nombre: 'Herramientas Eléctricas', slug: 'herramientas-electricas' },\r\n        { id: 4, nombre: 'Materiales de Construcción', slug: 'materiales-construccion' },\r\n        { id: 5, nombre: 'Ferretería General', slug: 'ferreteria-general' }\r\n    ];\r\n    \r\n    // Crear tarjetas de categorías\r\n    categoriasDeMuestra.forEach(categoria => {\r\n        const card = document.createElement('div');\r\n        card.className = 'category-card';\r\n        \r\n        // URL de la imagen (asociación con slug)\r\n        const defaultImage = 'assets/images/categorias/default.jpg';\r\n        \r\n        card.innerHTML = `\r\n            <a href=\"categorias.html?id=${categoria.id}\">\r\n                <div class=\"category-overlay\">\r\n                    <h3 class=\"category-name\">${categoria.nombre}</h3>\r\n                </div>\r\n            </a>\r\n        `;\r\n        \r\n        container.appendChild(card);\r\n    });\r\n}\r\n\r\n// Inicializar cuando el DOM esté listo\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    // Cargar categorías en la página principal\r\n    if (window.location.pathname === '/' || window.location.pathname.includes('index.html')) {\r\n        loadCategories();\r\n    }\r\n    \r\n    // Cargar productos de la categoría en la página de categoría\r\n    if (window.location.pathname.includes('categorias.html')) {\r\n        const urlParams = new URLSearchParams(window.location.search);\r\n        const categoriaId = urlParams.get('id');\r\n        const page = urlParams.get('page') || 1;\r\n        \r\n        if (categoriaId) {\r\n            loadCategoryProducts(categoriaId, page);\r\n        } else {\r\n            // Si no hay categoría especificada, mostrar todas las categorías\r\n            loadCategories();\r\n        }\r\n    }\r\n});",
      "checkout.js": "",
      "main.js": "",
      "productos.js": "// Función para cargar productos destacados en la página de inicio\r\nasync function loadFeaturedProducts() {\r\n    try {\r\n        const featuredContainer = document.getElementById('featured-products');\r\n        if (!featuredContainer) return;\r\n        \r\n        // Limpiar el contenedor\r\n        featuredContainer.innerHTML = '<div class=\"loading\">Cargando productos...</div>';\r\n        \r\n        // Intentar obtener productos de la API\r\n        let productos = [];\r\n        try {\r\n            const resultado = await getProductosDestacados(8);\r\n            if (resultado && Array.isArray(resultado)) {\r\n                productos = resultado;\r\n            } else if (resultado && resultado.productos) {\r\n                productos = resultado.productos;\r\n            }\r\n        } catch (error) {\r\n            console.error('Error al cargar productos destacados:', error);\r\n        }\r\n        \r\n        // Si no hay productos de la API, usar datos de muestra\r\n        if (!productos || productos.length === 0) {\r\n            productos = [\r\n                { id: 1, nombre: 'Martillo Profesional', codigo: 'MART001', precio: 12990, categoria_id: 1 },\r\n                { id: 2, nombre: 'Destornillador Eléctrico', codigo: 'DEST001', precio: 19990, categoria_id: 3 },\r\n                { id: 3, nombre: 'Sierra Circular', codigo: 'SIER001', precio: 89990, categoria_id: 3 },\r\n                { id: 4, nombre: 'Cemento 25kg', codigo: 'CEM001', precio: 5990, categoria_id: 4 }\r\n            ];\r\n        }\r\n        \r\n        // Limpiar el contenedor\r\n        featuredContainer.innerHTML = '';\r\n        \r\n        // Crear tarjetas de productos\r\n        productos.forEach(producto => {\r\n            const card = createProductCard(producto);\r\n            featuredContainer.appendChild(card);\r\n        });\r\n    } catch (error) {\r\n        console.error('Error general al cargar productos destacados:', error);\r\n        const featuredContainer = document.getElementById('featured-products');\r\n        if (featuredContainer) {\r\n            featuredContainer.innerHTML = `\r\n                <p class=\"error\">Error al cargar productos. Por favor, intente nuevamente.</p>\r\n                <div class=\"products-grid\">\r\n                    ${createSampleProductsHTML()}\r\n                </div>\r\n            `;\r\n        }\r\n    }\r\n}\r\n\r\n// Función para crear HTML de productos de muestra\r\nfunction createSampleProductsHTML() {\r\n    const productos = [\r\n        { id: 1, nombre: 'Martillo Profesional', codigo: 'MART001', precio: 12990 },\r\n        { id: 2, nombre: 'Destornillador Eléctrico', codigo: 'DEST001', precio: 19990 },\r\n        { id: 3, nombre: 'Sierra Circular', codigo: 'SIER001', precio: 89990 },\r\n        { id: 4, nombre: 'Cemento 25kg', codigo: 'CEM001', precio: 5990 }\r\n    ];\r\n    \r\n    return productos.map(producto => `\r\n        <div class=\"product-card\">\r\n            <div class=\"product-image\">\r\n                <a href=\"product-detail.html?id=${producto.id}\">\r\n                    <img src=\"../assets/images/default.jpg\" alt=\"${producto.nombre}\">\r\n                </a>\r\n            </div>\r\n            <div class=\"product-details\">\r\n                <h3 class=\"product-title\">\r\n                    <a href=\"product-detail.html?id=${producto.id}\">${producto.nombre}</a>\r\n                </h3>\r\n                <div class=\"product-price\">$${formatPrice(producto.precio)}</div>\r\n                <button class=\"btn add-to-cart\" data-id=\"${producto.id}\" data-nombre=\"${producto.nombre}\" data-precio=\"${producto.precio}\" data-imagen=\"../assets/images/default.jpg\">\r\n                    Agregar al carrito\r\n                </button>\r\n            </div>\r\n        </div>\r\n    `).join('');\r\n}\r\n\r\n// Función para cargar productos nuevos en la página de inicio\r\nasync function loadNewProducts() {\r\n    try {\r\n        const newProductsContainer = document.getElementById('new-products');\r\n        if (!newProductsContainer) return;\r\n        \r\n        // Limpiar el contenedor\r\n        newProductsContainer.innerHTML = '<div class=\"loading\">Cargando productos...</div>';\r\n        \r\n        // Obtener productos nuevos\r\n        const productos = await getProductosNuevos(8);\r\n        \r\n        // Verificar si hay productos\r\n        if (!productos || productos.length === 0) {\r\n            newProductsContainer.innerHTML = '<p class=\"no-products\">No hay productos nuevos disponibles</p>';\r\n            return;\r\n        }\r\n        \r\n        // Limpiar el contenedor\r\n        newProductsContainer.innerHTML = '';\r\n        \r\n        // Crear tarjetas de productos\r\n        productos.forEach(producto => {\r\n            const card = createProductCard(producto);\r\n            newProductsContainer.appendChild(card);\r\n        });\r\n    } catch (error) {\r\n        console.error('Error al cargar productos nuevos:', error);\r\n        const newProductsContainer = document.getElementById('new-products');\r\n        if (newProductsContainer) {\r\n            newProductsContainer.innerHTML = '<p class=\"error\">Error al cargar productos. Por favor, intente nuevamente.</p>';\r\n        }\r\n    }\r\n}\r\n\r\n// Función para crear una tarjeta de producto\r\nfunction createProductCard(producto) {\r\n    // Crear elemento principal\r\n    const card = document.createElement('div');\r\n    card.className = 'product-card';\r\n    \r\n    // IMPORTANTE: Usar la ruta EXACTA al archivo products.html\r\n    // Si estamos en index.html en la raíz, la ruta debería ser:\r\n     const productDetailUrl = getProductUrl(producto.id);\r\n    \r\n    // También ajustar rutas a imágenes para que sean relativas\r\n    const imageUrl = `assets/images/productos/${producto.codigo}.jpg`;\r\n    const defaultImage = `assets/images/default.jpg`;\r\n    \r\n    // HTML interno del card con URL corregidas\r\n    card.innerHTML = `\r\n        <div class=\"product-image\">\r\n            <a href=\"${productDetailUrl}\">\r\n                <img src=\"${imageUrl}\" alt=\"${producto.nombre}\" onerror=\"this.src='${defaultImage}'\">\r\n            </a>\r\n        </div>\r\n        <div class=\"product-details\">\r\n            <h3 class=\"product-title\">\r\n                <a href=\"${productDetailUrl}\">${producto.nombre}</a>\r\n            </h3>\r\n            <div class=\"product-price\">\r\n                ${producto.precio_oferta ? \r\n                    `<span class=\"original-price\">$${formatPrice(producto.precio)}</span> $${formatPrice(producto.precio_oferta)}` : \r\n                    `$${formatPrice(producto.precio)}`\r\n                }\r\n            </div>\r\n            <button class=\"btn add-to-cart\" data-id=\"${producto.id}\" data-nombre=\"${producto.nombre}\" data-precio=\"${producto.precio_oferta || producto.precio}\" data-imagen=\"${imageUrl}\">\r\n                Agregar al carrito\r\n            </button>\r\n        </div>\r\n    `;\r\n    \r\n    // Agregar evento al botón de agregar al carrito\r\n    const addButton = card.querySelector('.add-to-cart');\r\n    addButton.addEventListener('click', function() {\r\n        const productData = {\r\n            id: this.dataset.id,\r\n            nombre: this.dataset.nombre,\r\n            precio: parseFloat(this.dataset.precio),\r\n            imagen: this.dataset.imagen,\r\n            cantidad: 1\r\n        };\r\n        \r\n        addToCart(productData);\r\n        showNotification('Producto agregado al carrito');\r\n    });\r\n    \r\n    return card;\r\n}\r\n\r\n// Función para cargar detalle de un producto\r\nasync function loadProductDetail(productId) {\r\n    try {\r\n        const productContainer = document.getElementById('product-container');\r\n        if (!productContainer) return;\r\n        \r\n        // Limpiar el contenedor\r\n        productContainer.innerHTML = '<div class=\"loading\">Cargando producto...</div>';\r\n        \r\n        // Obtener datos del producto\r\n        const producto = await getProductoById(productId);\r\n        \r\n        // Obtener imágenes del producto\r\n        const imagenes = await getImagenesProducto(productId);\r\n        \r\n        // Obtener especificaciones del producto\r\n        const especificaciones = await getEspecificacionesProducto(productId);\r\n        \r\n        // Obtener datos de la categoría\r\n        const categoria = await getCategoriaById(producto.categoria_id);\r\n        \r\n        // Verificar si el producto existe\r\n        if (!producto) {\r\n            productContainer.innerHTML = '<p class=\"error\">Producto no encontrado</p>';\r\n            return;\r\n        }\r\n        \r\n        // Actualizar el breadcrumb y título\r\n        document.getElementById('product-category').textContent = categoria ? categoria.nombre : 'Categoría';\r\n        document.getElementById('product-name').textContent = producto.nombre;\r\n        document.title = `${producto.nombre} - FERREMAS`;\r\n        \r\n        // Crear URL de la imagen principal (asociando código de producto)\r\n        const mainImageUrl = imagenes && imagenes.length > 0 ? \r\n            `assets/images/productos/${producto.codigo}_1.jpg` : \r\n            `assets/images/productos/${producto.codigo}.jpg`;\r\n        const defaultImage = 'assets/images/productos/default.jpg';\r\n        \r\n        // Crear HTML del detalle del producto\r\n        let thumbnailsHtml = '';\r\n        if (imagenes && imagenes.length > 0) {\r\n            thumbnailsHtml = '<div class=\"thumbnails\">';\r\n            for (let i = 0; i < imagenes.length; i++) {\r\n                const thumbUrl = `assets/images/productos/${producto.codigo}_${i+1}.jpg`;\r\n                thumbnailsHtml += `\r\n                    <div class=\"thumbnail ${i === 0 ? 'active' : ''}\" data-index=\"${i}\">\r\n                        <img src=\"${thumbUrl}\" alt=\"${producto.nombre}\" onerror=\"this.src='${defaultImage}'\">\r\n                    </div>\r\n                `;\r\n            }\r\n            thumbnailsHtml += '</div>';\r\n        }\r\n        \r\n        // Crear HTML de especificaciones\r\n        let specsHtml = '';\r\n        if (especificaciones && especificaciones.length > 0) {\r\n            specsHtml = `\r\n                <div class=\"product-specs\">\r\n                    <h3>Especificaciones</h3>\r\n                    <table class=\"specs-table\">\r\n                        <tbody>\r\n            `;\r\n            \r\n            especificaciones.forEach(spec => {\r\n                specsHtml += `\r\n                    <tr>\r\n                        <th>${spec.nombre}</th>\r\n                        <td>${spec.valor}</td>\r\n                    </tr>\r\n                `;\r\n            });\r\n            \r\n            specsHtml += `\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            `;\r\n        }\r\n        \r\n        // Generar HTML completo del detalle\r\n        productContainer.innerHTML = `\r\n            <div class=\"product-images\">\r\n                <div class=\"main-image\">\r\n                    <img src=\"${mainImageUrl}\" alt=\"${producto.nombre}\" id=\"main-product-image\" onerror=\"this.src='${defaultImage}'\">\r\n                </div>\r\n                ${thumbnailsHtml}\r\n            </div>\r\n            <div class=\"product-info\">\r\n                <h1>${producto.nombre}</h1>\r\n                <p class=\"product-code\">Código: ${producto.codigo}</p>\r\n                <div class=\"product-price-detail\">\r\n                    ${producto.precio_oferta ? \r\n                        `<span class=\"original-price\">$${formatPrice(producto.precio)}</span> $${formatPrice(producto.precio_oferta)}` : \r\n                        `$${formatPrice(producto.precio)}`\r\n                    }\r\n                </div>\r\n                <div class=\"product-description\">\r\n                    ${producto.descripcion || 'Sin descripción disponible'}\r\n                </div>\r\n                <div class=\"stock-info\">\r\n                    <span class=\"${producto.stock > 0 ? 'in-stock' : 'out-of-stock'}\">\r\n                        ${producto.stock > 0 ? `Stock disponible: ${producto.stock} unidades` : 'Sin stock'}\r\n                    </span>\r\n                </div>\r\n                <div class=\"product-quantity\">\r\n                    <button class=\"quantity-btn\" id=\"decrease-quantity\">-</button>\r\n                    <input type=\"number\" id=\"product-quantity\" class=\"quantity-input\" value=\"1\" min=\"1\" max=\"${producto.stock}\">\r\n                    <button class=\"quantity-btn\" id=\"increase-quantity\">+</button>\r\n                </div>\r\n                <button class=\"btn add-to-cart-detail\" id=\"add-to-cart-btn\" ${producto.stock <= 0 ? 'disabled' : ''}>\r\n                    ${producto.stock > 0 ? 'Agregar al carrito' : 'Sin stock'}\r\n                </button>\r\n                ${specsHtml}\r\n            </div>\r\n        `;\r\n        \r\n        // Agregar eventos a los botones de cantidad\r\n        const decreaseBtn = document.getElementById('decrease-quantity');\r\n        const increaseBtn = document.getElementById('increase-quantity');\r\n        const quantityInput = document.getElementById('product-quantity');\r\n        const addToCartBtn = document.getElementById('add-to-cart-btn');\r\n        \r\n        decreaseBtn.addEventListener('click', () => {\r\n            let value = parseInt(quantityInput.value);\r\n            if (value > 1) {\r\n                quantityInput.value = value - 1;\r\n            }\r\n        });\r\n        \r\n        increaseBtn.addEventListener('click', () => {\r\n            let value = parseInt(quantityInput.value);\r\n            if (value < producto.stock) {\r\n                quantityInput.value = value + 1;\r\n            }\r\n        });\r\n        \r\n        // Agregar evento para las miniaturas\r\n        const thumbnails = document.querySelectorAll('.thumbnail');\r\n        thumbnails.forEach(thumb => {\r\n            thumb.addEventListener('click', function() {\r\n                // Remover clase active de todas las miniaturas\r\n                thumbnails.forEach(t => t.classList.remove('active'));\r\n                // Agregar clase active al thumbnail clickeado\r\n                this.classList.add('active');\r\n                \r\n                // Cambiar imagen principal\r\n                const index = this.dataset.index;\r\n                const mainImage = document.getElementById('main-product-image');\r\n                mainImage.src = `assets/images/productos/${producto.codigo}_${parseInt(index)+1}.jpg`;\r\n                mainImage.onerror = function() {\r\n                    this.src = defaultImage;\r\n                };\r\n            });\r\n        });\r\n        \r\n        // Agregar evento al botón de agregar al carrito\r\n        addToCartBtn.addEventListener('click', function() {\r\n            if (producto.stock <= 0) return;\r\n            \r\n            const cantidad = parseInt(quantityInput.value);\r\n            if (cantidad < 1 || cantidad > producto.stock) return;\r\n            \r\n            const productData = {\r\n                id: producto.id,\r\n                nombre: producto.nombre,\r\n                precio: producto.precio_oferta || producto.precio,\r\n                imagen: mainImageUrl,\r\n                cantidad: cantidad\r\n            };\r\n            \r\n            addToCart(productData);\r\n            showNotification('Producto agregado al carrito');\r\n        });\r\n        \r\n        // Cargar productos relacionados\r\n        loadRelatedProducts(producto.categoria_id, producto.id);\r\n        \r\n    } catch (error) {\r\n        console.error('Error al cargar detalle del producto:', error);\r\n        const productContainer = document.getElementById('product-container');\r\n        if (productContainer) {\r\n            productContainer.innerHTML = '<p class=\"error\">Error al cargar el producto. Por favor, intente nuevamente.</p>';\r\n        }\r\n    }\r\n}\r\n\r\n// Función para cargar productos relacionados\r\nasync function loadRelatedProducts(categoriaId, currentProductId) {\r\n    try {\r\n        const relatedContainer = document.getElementById('related-products');\r\n        if (!relatedContainer) return;\r\n        \r\n        // Limpiar el contenedor\r\n        relatedContainer.innerHTML = '<div class=\"loading\">Cargando productos relacionados...</div>';\r\n        \r\n        // Obtener productos de la misma categoría\r\n        const resultado = await getProductosByCategoria(categoriaId, 1, 4);\r\n        const productos = resultado.productos;\r\n        \r\n        // Verificar si hay productos\r\n        if (!productos || productos.length === 0) {\r\n            relatedContainer.innerHTML = '<p class=\"no-products\">No hay productos relacionados disponibles</p>';\r\n            return;\r\n        }\r\n        \r\n        // Filtrar para excluir el producto actual\r\n        const related = productos.filter(p => p.id !== parseInt(currentProductId));\r\n        \r\n        // Limpiar el contenedor\r\n        relatedContainer.innerHTML = '';\r\n        \r\n        // Crear tarjetas de productos relacionados\r\n        related.forEach(producto => {\r\n            const card = createProductCard(producto);\r\n            relatedContainer.appendChild(card);\r\n        });\r\n        \r\n        // Si no hay suficientes relacionados, mostrar mensaje\r\n        if (related.length === 0) {\r\n            relatedContainer.innerHTML = '<p class=\"no-products\">No hay productos relacionados disponibles</p>';\r\n        }\r\n    } catch (error) {\r\n        console.error('Error al cargar productos relacionados:', error);\r\n        const relatedContainer = document.getElementById('related-products');\r\n        if (relatedContainer) {\r\n            relatedContainer.innerHTML = '<p class=\"error\">Error al cargar productos relacionados.</p>';\r\n        }\r\n    }\r\n}\r\n\r\n// Función para cargar categorías en la página principal\r\nasync function loadCategories() {\r\n    try {\r\n        const categoriesContainer = document.getElementById('categories-container');\r\n        if (!categoriesContainer) return;\r\n        \r\n        // Limpiar el contenedor\r\n        categoriesContainer.innerHTML = '<div class=\"loading\">Cargando categorías...</div>';\r\n        \r\n        // Obtener categorías\r\n        const categorias = await getCategorias();\r\n        \r\n        // Verificar si hay categorías\r\n        if (!categorias || categorias.length === 0) {\r\n            categoriesContainer.innerHTML = '<p class=\"no-categories\">No hay categorías disponibles</p>';\r\n            return;\r\n        }\r\n        \r\n        // Limpiar el contenedor\r\n        categoriesContainer.innerHTML = '';\r\n        \r\n        // Crear tarjetas de categorías\r\n        categorias.forEach(categoria => {\r\n            const card = document.createElement('div');\r\n            card.className = 'category-card';\r\n            \r\n            // URL de la imagen (asociación)\r\n            const imageUrl = `assets/images/categorias/${categoria.slug}.jpg`;\r\n            const defaultImage = 'assets/images/categorias/default.jpg';\r\n            \r\n            card.innerHTML = `\r\n                <a href=\"categorias.html?id=${categoria.id}\">\r\n                    <img src=\"${imageUrl}\" alt=\"${categoria.nombre}\" onerror=\"this.src='${defaultImage}'\">\r\n                    <div class=\"category-overlay\">\r\n                        <h3 class=\"category-name\">${categoria.nombre}</h3>\r\n                    </div>\r\n                </a>\r\n            `;\r\n            \r\n            categoriesContainer.appendChild(card);\r\n        });\r\n    } catch (error) {\r\n        console.error('Error al cargar categorías:', error);\r\n        const categoriesContainer = document.getElementById('categories-container');\r\n        if (categoriesContainer) {\r\n            categoriesContainer.innerHTML = '<p class=\"error\">Error al cargar categorías.</p>';\r\n        }\r\n    }\r\n}\r\n\r\n// Función para mostrar notificación\r\nfunction showNotification(message, type = 'success') {\r\n    // Crear elemento de notificación\r\n    const notification = document.createElement('div');\r\n    notification.className = `notification ${type}`;\r\n    notification.textContent = message;\r\n    \r\n    // Agregar al documento\r\n    document.body.appendChild(notification);\r\n    \r\n    // Mostrar con animación\r\n    setTimeout(() => notification.classList.add('show'), 10);\r\n    \r\n    // Esconder después de 3 segundos\r\n    setTimeout(() => {\r\n        notification.classList.remove('show');\r\n        setTimeout(() => document.body.removeChild(notification), 300);\r\n    }, 3000);\r\n}\r\n\r\n// Función para formatear precios\r\nfunction formatPrice(price) {\r\n    return new Intl.NumberFormat('es-CL').format(price);\r\n}\r\n\r\n// Inicializar cuando el DOM esté listo\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    // Cargar elementos en la página principal\r\n    if (window.location.pathname === '/' || window.location.pathname.includes('index.html')) {\r\n        loadCategories();\r\n        loadFeaturedProducts();\r\n        loadNewProducts();\r\n    }\r\n    \r\n    // Inicializar contador del carrito\r\n    updateCartCount();\r\n});",
      "tracking.js": ""
    }
  }
}